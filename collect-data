{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import the libraries we are going to use. \n",
    "from etsy2 import Etsy\n",
    "import pandas as pd \n",
    "\n",
    "#connect with the API, get you api key from etsy \n",
    "etsy = Etsy(api_key='etsy api-key')\n",
    "\n",
    "#Get the data of one product we want to compare with other products. The listing_id is a number in the link of the product\n",
    "#you could get from etsy\n",
    "producto_ref = etsy.getListing(listing_id = \"866093262\")\n",
    "\n",
    "#create a dataframe with the data of this product. \n",
    "producto_ref_df = pd.DataFrame(producto_ref)\n",
    "\n",
    "#start a new dataframe where we are going to put all de data\n",
    "find_results = etsy.findAllListingActive(tags = 'photo background',\n",
    "                                         limit = 100)\n",
    "results = pd.DataFrame(find_results)\n",
    "\n",
    "#create a for loop to look in etsy for all products related with the tags of the product we are comparing. \n",
    "#the tags is a datafame column type list. \n",
    "for i in producto_ref_df.tags:\n",
    "    #iterate each key word in the list\n",
    "    for x in i:\n",
    "        #use the key word and get the products in the first 10 pages\n",
    "        for j in range(1,10):\n",
    "            #call the procedure go get all listing with the tag, limit 100 and the 10 pages\n",
    "            find_results = etsy.findAllListingActive(tags = x, limit = 100, page = j)\n",
    "            #put the data in a dataframe\n",
    "            df = pd.DataFrame(find_results)\n",
    "            #join the dataframes\n",
    "            frames = [df, results]\n",
    "            results = pd.concat(frames)\n",
    "#eliminate the duplicates\n",
    "productos_ref = results.drop_duplicates(subset = ['listing_id'])\n",
    "#verify the shape \n",
    "productos_ref.shape\n",
    "#create the csv\n",
    "productos_ref.to_csv('back_drop_data.csv', index=False)   "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
